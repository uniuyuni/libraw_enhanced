[build-system]
requires = [
    "setuptools>=45",
    "wheel",
    "pybind11>=2.10.0",
    "numpy>=1.19.0",
]
build-backend = "setuptools.build_meta"

[project]
name = "libraw_enhanced"
version = "0.1.0"
description = "High-performance LibRaw Python wrapper with Metal acceleration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "LibRaw Enhanced Team", email = "team@libraw-enhanced.org"}
]
keywords = ["raw", "image", "processing", "libraw", "metal", "apple", "silicon", "photography"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10", 
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: C++",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Scientific/Engineering :: Image Processing",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.19.0",
    "Pillow>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov",
    "black",
    "flake8", 
    "mypy",
]
scipy = ["scipy>=1.6.0"]
# Apple Silicon specific dependencies
coreml = [
    "coremltools>=5.0; sys_platform == 'darwin' and platform_machine == 'arm64'",
]
# Full development setup
full = [
    "libraw_enhanced[dev,scipy,coreml]",
]

[project.urls]
Homepage = "https://github.com/libraw-enhanced/libraw-enhanced"
"Bug Reports" = "https://github.com/libraw-enhanced/libraw-enhanced/issues"
Source = "https://github.com/libraw-enhanced/libraw-enhanced"
Documentation = "https://libraw-enhanced.readthedocs.io/"

[tool.setuptools]
packages = ["libraw_enhanced"]
include-package-data = true
zip-safe = false

[tool.setuptools.package-data]
libraw_enhanced = ["*.pyi", "py.typed"]

# Black formatting configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy type checking configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "libraw_enhanced._core",
    "scipy.*",
    "coremltools.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "apple_silicon: marks tests requiring Apple Silicon",
    "metal: marks tests requiring Metal support",
    "benchmark: marks performance benchmark tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["libraw_enhanced"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]